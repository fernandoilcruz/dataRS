info_url <- paste0(info,".php?")
key_url <- paste0("key=",api_key)
base_url <- paste0(root_url, info_url, key_url)
# # Make the request
# response <- httr::GET(full_url)
#
# # Check for errors
# if (httr::status_code(response) != 200) {
#   stop("Failed to fetch data: ", httr::content(response, "text"), call. = FALSE)
# }
#
# # Parse and return the content
# return(httr::content(response, "parsed"))
}
get_url(info="arvore")
get_url <- function(info) {
api_key <- get_api_key()
#check available arguments
infos <- c("arvore",
"var_list",
"var",
"data_aval",
"data",
"ag",
"composicao_ag",
"composicao_ag_all",
"fonte",
"unid_medida")
if(!info %in% infos){stop(paste0("Error: the info argument is only available for "),
paste(ags, collapse = ", "))}
# Construct the URL
root_url <- "https://datavis.dee.rs.gov.br/api/"
info_url <- paste0(info,".php?")
key_url <- paste0("key=",api_key)
base_url <- paste0(root_url, info_url, key_url)
return(base_url)
# # Make the request
# response <- httr::GET(full_url)
#
# # Check for errors
# if (httr::status_code(response) != 200) {
#   stop("Failed to fetch data: ", httr::content(response, "text"), call. = FALSE)
# }
#
# # Parse and return the content
# return(httr::content(response, "parsed"))
}
get_url(info="arvore")
deetree <-
function(){
url_arvore <- get_url(info = "arvore")
api <- httr::GET(url_arvore)
api_content <- base::rawToChar(api$content)
data <- jsonlite::fromJSON(api_content,
simplifyVector = FALSE)
# UI
ui <-
fluidPage(
tags$head(
tags$style(HTML("
#tree-container {
width: 100%;
height: 1000px;  /* Adjust height as needed */
overflow: auto; /* Enables both vertical and horizontal scrolling */
border: 1px solid #ddd;
padding: 10px;
}
"))
),
tags$div(
id = "tree-container",
jsTreeR::jstree(data$children, checkboxes = FALSE, search = TRUE)
)
)
# Server (empty since no dynamic behavior needed)
server <- function(input, output, session) {}
# Run App
shinyApp(ui, server)
}
deetree()
url
url <- ifelse(
is.null(period),
base_url(info = "composicao_ag_all"),
paste0(base_url(info = "composicao_ag_all"),
"&periodo=",
paste0(period,collapse = ",")
)
)
base_url(info = "composicao_ag_all")
geoagregall2 <-
function(period = NULL, key){
#check arguments
checkmate::assert_numeric(period, null.ok = T)
url <- ifelse(
is.null(period),
get_url(info = "composicao_ag_all"),
paste0(base_url(info = "composicao_ag_all"),
"&periodo=",
paste0(period,collapse = ",")
)
)
# )
#   paste0("https://datavis.dee.rs.gov.br/api/composicao_ag_all.php?",
#          "key=",
#          key,
#          "&",
#          "periodo=",
#          paste0(period,collapse = ",")
#
#   )
#output
x <-
url |>
jsonlite::fromJSON() |>
tibble::as_tibble() |>
dplyr::rename("geo_id_municipio" = "id_municipio",
"geo_id_corede" = "id_corede",
"geo_id_regfunc" = "id_regfunc",
"geo_id_micro" = "id_microrregiao",
"geo_id_meso" = "id_mesorregiao",
"geo_id_estado" = "id_estado",
"geo_name_municipio" = "municipio",
"geo_name_corede" = "corede",
"geo_name_regfunc" = "regfunc",
"geo_name_micro" = "microrregiao",
"geo_name_meso" = "mesorregiao",
"geo_name_estado" = "estado",
"period" = "ano")
return(x)
}
# start<-Sys.time()
# geoagregall2(period = 1994:2024)
# end<-Sys.time()
# end-start
# geoagregall3 <-
#   function(period = NULL){
#
#     url <-
#       paste0("http://10.112.42.22/api/composicao_ag_all.php?",
#              "periodo=",paste0(period,collapse = ",")
#       )
#
#     #output
#     x <-
#       url |>
#       jsonlite::fromJSON() |>
#       tibble::as_tibble() |>
#       dplyr::rename("geo_id_municipio" = "id_municipio",
#                     "geo_id_corede" = "id_corede",
#                     "geo_id_micro" = "id_microrregiao",
#                     "geo_id_meso" = "id_mesorregiao",
#
#                     "geo_name_municipio" = "municipio",
#                     "geo_name_corede" = "corede",
#                     "geo_name_micro" = "microrregiao",
#                     "geo_name_meso" = "mesorregiao",
#                     "period" = "ano")
#
#     return(x)
#
#   }
#
#
# start<-Sys.time()
# geoagregall3()
# end<-Sys.time()
# end-start
geoagregall2(period = 2010)
geoagregall2 <-
function(period = NULL, key){
#check arguments
checkmate::assert_numeric(period, null.ok = T)
url <- ifelse(
is.null(period),
get_url(info = "composicao_ag_all"),
paste0(get_url(info = "composicao_ag_all"),
"&periodo=",
paste0(period,collapse = ",")
)
)
# )
#   paste0("https://datavis.dee.rs.gov.br/api/composicao_ag_all.php?",
#          "key=",
#          key,
#          "&",
#          "periodo=",
#          paste0(period,collapse = ",")
#
#   )
#output
x <-
url |>
jsonlite::fromJSON() |>
tibble::as_tibble() |>
dplyr::rename("geo_id_municipio" = "id_municipio",
"geo_id_corede" = "id_corede",
"geo_id_regfunc" = "id_regfunc",
"geo_id_micro" = "id_microrregiao",
"geo_id_meso" = "id_mesorregiao",
"geo_id_estado" = "id_estado",
"geo_name_municipio" = "municipio",
"geo_name_corede" = "corede",
"geo_name_regfunc" = "regfunc",
"geo_name_micro" = "microrregiao",
"geo_name_meso" = "mesorregiao",
"geo_name_estado" = "estado",
"period" = "ano")
return(x)
}
# start<-Sys.time()
# geoagregall2(period = 1994:2024)
# end<-Sys.time()
# end-start
# geoagregall3 <-
#   function(period = NULL){
#
#     url <-
#       paste0("http://10.112.42.22/api/composicao_ag_all.php?",
#              "periodo=",paste0(period,collapse = ",")
#       )
#
#     #output
#     x <-
#       url |>
#       jsonlite::fromJSON() |>
#       tibble::as_tibble() |>
#       dplyr::rename("geo_id_municipio" = "id_municipio",
#                     "geo_id_corede" = "id_corede",
#                     "geo_id_micro" = "id_microrregiao",
#                     "geo_id_meso" = "id_mesorregiao",
#
#                     "geo_name_municipio" = "municipio",
#                     "geo_name_corede" = "corede",
#                     "geo_name_micro" = "microrregiao",
#                     "geo_name_meso" = "mesorregiao",
#                     "period" = "ano")
#
#     return(x)
#
#   }
#
#
# start<-Sys.time()
# geoagregall3()
# end<-Sys.time()
# end-start
geoagregall2(period = 2010)
geoagregcomp <-
function(ag = "corede",
geo_id,
period = 2022){
#check arguments
checkmate::assert_character(ag)
checkmate::assert_numeric(geo_id)
checkmate::assert_numeric(period)
#check available arguments
ags <- c("micro", "meso", "corede", "regfunc","estado")
if(!ag %in% ags){stop(paste0("Error: the ag argument is only available for "),
paste(ags, collapse = ", "))}
ids <- geoagreg(ag = ag, sort = "ASC", key) |> dplyr::select(geo_id) |> dplyr::pull()
if(is.null(geo_id)){
stop("Error: id argument must be provided")
}else{
if(!geo_id %in% ids){stop(paste0("Error: the id argument for the ", ag," aggregation is only available for "),
paste(ids, collapse = ", "), ". Check the geoagreg() function to find the id you want.")}
}
periods <- seq(1994,lubridate::year(Sys.Date())-1)
if(ag == "corede" & (!period %in% periods)){stop(paste0("Error: the period argument for coredes is only available for "),
paste(periods, collapse = ", "))}
#url
url <- paste0(
get_url(info = "composicao_ag"),
"&ag=",ag,
"&id=",geo_id,
"&periodo=",period
)
#output
x <-
url |>
jsonlite::fromJSON() |>
tibble::as_tibble() |>
dplyr::rename("geo_id" = "id",
"geo_name" = "nome")
return(x)
}
geoagreg(ag = "meso")
geoagregcomp <-
function(ag = "corede",
geo_id,
period = 2022){
#check arguments
checkmate::assert_character(ag)
checkmate::assert_numeric(geo_id)
checkmate::assert_numeric(period)
#check available arguments
ags <- c("micro", "meso", "corede", "regfunc","estado")
if(!ag %in% ags){stop(paste0("Error: the ag argument is only available for "),
paste(ags, collapse = ", "))}
ids <- geoagreg(ag = ag) |> dplyr::select(geo_id) |> dplyr::pull()
if(is.null(geo_id)){
stop("Error: id argument must be provided")
}else{
if(!geo_id %in% ids){stop(paste0("Error: the id argument for the ", ag," aggregation is only available for "),
paste(ids, collapse = ", "), ". Check the geoagreg() function to find the id you want.")}
}
periods <- seq(1994,lubridate::year(Sys.Date())-1)
if(ag == "corede" & (!period %in% periods)){stop(paste0("Error: the period argument for coredes is only available for "),
paste(periods, collapse = ", "))}
#url
url <- paste0(
get_url(info = "composicao_ag"),
"&ag=",ag,
"&id=",geo_id,
"&periodo=",period
)
#output
x <-
url |>
jsonlite::fromJSON() |>
tibble::as_tibble() |>
dplyr::rename("geo_id" = "id",
"geo_name" = "nome")
return(x)
}
geoagregcomp(ag = "meso", geo_id = 10, period = 2020)
geoagreg(ag = "meso")
geoagreg <-
function(ag = "municipio",
sort = "ASC"){
#check arguments
checkmate::assert_character(ag)
checkmate::assert_character(sort)
#check available arguments
ags <- c("municipio", "micro", "meso", "regfunc", "corede", "estado")
if(!ag %in% ags){stop(paste0("Error: the ag argument is only available for "),
paste(ags, collapse = ", "))}
sorts <- c("ASC","DESC")
if(!sort %in% sorts){stop(paste0("Error: sort argument is only available for "),
paste(sorts, collapse = ", "))}
#url
url <-
paste0(
get_url(info = "ag"),
"&ag=",ag,
"&sort=",sort
)
#output
x <-
url |>
jsonlite::fromJSON() |>
tibble::as_tibble() |>
dplyr::rename("geo_id" = "id",
"geo_name" = "nome")
return(x)
}
geoagregall2()
geoagreg(ag = "meso")
geoagregcomp(ag = "meso", geo_id = 10, period = 2020)
getdata <-
function(var_id,
ag,
period = "all",
sort = "ASC",
add_labels = FALSE){
#check available arguments
if(missing(var_id)){stop("Error: Select a valid argument for var_id. You can use the var() and vardetails() functions to see the available options")}
ags <- c("municipio", "micro", "meso", "corede", "regfunc" ,"estado")
if((missing(ag)) || (!ag %in% ags)){stop(paste0("Error: Select a valid argument for ag. The ag argument is only available for "),
paste(ags, collapse = ", "))}
#if(missing(period)){stop("Error: Select a valid argument for period")}
#treat var_id
if(any(var_id == "all")){
var_id <- vars() |> dplyr::select(var_id) |> dplyr::pull()
}
#ARGUMENTO FORÃ‡ADO####################################ALOOOOOOOOW
# var_id <- c(3755, 4784)
# ag = "municipio"
# period = "all"
# sort = "ASC"
#output
x<-
var_id |>
purrr::map_df(function(z){
paste0(get_url(info = "data"),
"&id=",
z,
"&ag=",
ag,
"&periodo=",
period |> paste0(collapse = ","),
"&sort=",
sort
) |>
jsonlite::fromJSON() |>
tidyr::unnest(cols = data) |>
dplyr::mutate(var_id = z)
})
x <-
x |>
dplyr::rename("geo_id" = "id",
"year" = "ano",
"value" = "valor",
"unit" = "un_medida",
"note" = "nota") |>
dplyr::select(var_id,geo_id,year,value, unit, note)
#add labels
vars1 <- vars()
geos1 <- geoagreg(ag = ag)
if(add_labels == TRUE){
x <-
x |>
dplyr::left_join(vars1,
by = c("var_id" = "var_id")) |>
dplyr::left_join(geos1,
by = c("geo_id" = "geo_id")) |>
dplyr::select(var_id, var_name, geo_id, geo_name, year, value, unit, note)
}
return(x)
}
#teste
# inicio <- Sys.time()
# getdata(var_id = c(3755,4784), ag = "municipio")
# fim <- Sys.time()
# tempo <- fim-inicio
# inicio <- Sys.time()
# teste <- vars() |> dplyr::select(var_id) |> dplyr::pull()
# getdata(var_id = "all", ag = "meso")
# fim <- Sys.time()
# tempo <- fim-inicio
# library(beepr)
# beep(sound = 3)
getdata(var_id = 4603,ag = "corede",period = "all")
getdata(var_id = 1686,ag = "corede",period = c(2010:2015))
um <-
function(){
x <- paste0(
get_url(info = "unid_medida")
)
jsonlite::fromJSON(x) |>
tibble::as_tibble() |>
dplyr::rename(
um_id = id,
um_name = nome,
um_acronym = sigla
)
}
um <-
function(){
x <-
get_url(info = "unid_medida")
jsonlite::fromJSON(x) |>
tibble::as_tibble() |>
dplyr::rename(
um_id = id,
um_name = nome,
um_acronym = sigla
)
}
um()
vardetails <-
function(var_id){
n <- length(var_id)
if(missing(var_id)){
stop("Choose an ID for the var_id argument. You can use the DEEDadosR::vars function to search for the id you wish.")
}else{
if(n == 1){
x <- paste0(get_url(info = "var"),
"&id=",
var_id) |>
jsonlite::fromJSON() |>
tibble::as_tibble() |>
dplyr::rename(var_id = id,
var_name = nome,
description = descricao,
type = tp_var,
decimal_places = nr_casasdecimais,
var_id_source = id_fontes
)
}else{
x <- var_id |>
purrr::map_df(.f = function(var_id){
paste0(get_url(info = "var"),
"id=",var_id) |>
jsonlite::fromJSON() |>
tibble::as_tibble()|>
dplyr::rename(var_id = id,
var_name = nome,
description = descricao,
type = tp_var,
decimal_places = nr_casasdecimais,
var_id_source = id_fontes
)
})
}
}
return(x)
}
vardetails(var_id = 4049)
rm(list=ls())
library(devtools)
load_all()
set_api_key(key = "e93368a014d8169d21cf13712290a0cb")
devtools::check()
library(devtools)
load_all()
deetree()
document()
load_all()
deetree()
set_api_key(key="9955789e6af3d0f2151a4e68c3bfa14a")
deetree()
